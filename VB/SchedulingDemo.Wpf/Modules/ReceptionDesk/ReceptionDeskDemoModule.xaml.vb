Imports DevExpress.Xpf.Core
Imports DevExpress.Xpf.DemoBase
Imports DevExpress.Xpf.Scheduling
Imports DevExpress.XtraScheduler.Native
Imports SchedulingDemo.ViewModels
Imports System
Imports System.Reflection
Imports System.Windows
Imports System.Collections.Generic
Imports System.Linq
Imports System.Windows.Input

Namespace SchedulingDemo
    <NoAutogeneratedCodeFiles, CodeFiles("Modules/ReceptionDesk/ReceptionDeskDemoModule.xaml", "Modules/ReceptionDesk/ReceptionDeskDemoModule.xaml.(cs)", "Modules/ReceptionDesk/MedicalAppointmentWindow.xaml", "ViewModels/ReceptionDesk/ReceptionDeskDemoViewModel.(cs)", "ViewModels/ReceptionDesk/MedicalAppointmentWindowViewModel.(cs)")>
    Partial Public Class ReceptionDeskDemoModule
        Inherits SchedulingDemoModule

        Public Sub New()
            InitializeComponent()
        End Sub
        Private Sub OnAppointmentWindowShowing(ByVal sender As Object, ByVal e As AppointmentWindowShowingEventArgs)
            Dim vm As ReceptionDeskDemoViewModel = TryCast(scheduler.DataContext, ReceptionDeskDemoViewModel)
            If vm IsNot Nothing Then
                e.Window.DataContext = MedicalAppointmentWindowViewModel.Create(e.Appointment, scheduler, vm.Patients)
            End If
        End Sub
        Private Sub OnAppointmentDrop(ByVal sender As Object, ByVal e As AppointmentItemDragDropEventArgs)
            Dim viewModel As AppointmentDragResizeViewModel = e.ViewModels(0)
            If CheckTimeResourceChanges(viewModel) Then
                e.Allow = True
            ElseIf DXMessageBox.Show(GetDropMessage(viewModel, e.CopyEffect, e.IsExternalDragDrop) & ControlChars.CrLf & "Proceed?", System.Reflection.Assembly.GetEntryAssembly().GetName().Name, MessageBoxButton.YesNo, MessageBoxImage.Question) = MessageBoxResult.No Then
                e.Allow = False
            End If
        End Sub
        Private Function CheckTimeResourceChanges(ByVal viewModel As AppointmentDragResizeViewModel) As Boolean
            Dim sourceAppointment As AppointmentItem = viewModel.Appointment
            Return viewModel.Start = sourceAppointment.Start AndAlso viewModel.End = sourceAppointment.End AndAlso viewModel.AllDay = sourceAppointment.AllDay AndAlso Object.Equals(viewModel.Resource.Id, sourceAppointment.ResourceId)
        End Function
        Private Function GetDropMessage(ByVal viewModel As AppointmentDragResizeViewModel, ByVal copyEffect As Boolean, ByVal isExternalDragDrop As Boolean) As String
            Dim sourceAppointment As AppointmentItem = viewModel.Appointment
            Dim sourceStart As String = sourceAppointment.Start.ToShortTimeString()
            Dim viewModelStart As String = viewModel.Start.ToShortTimeString()

            Dim sourceResource As ResourceItem = Me.scheduler.ResourceItems.GetById(sourceAppointment.ResourceId)
            Dim sourceResourceCaption As String = If(sourceResource Is Nothing, ResourceItemEmpty.Resource.Caption, sourceResource.Caption)
            Dim viewModelResourceCaption As String = viewModel.Resource.Caption
            If isExternalDragDrop Then
                Return String.Format("Creating {0}'s event at {1}.", viewModelResourceCaption, viewModelStart)
            End If
            Dim beginResult As String = If(copyEffect, "Coping ", "Moving ")
            If sourceResourceCaption <> viewModelResourceCaption Then
                Return beginResult & String.Format("{0}'s event at {1} to {2}'s event at {3}.", sourceResourceCaption, sourceStart, viewModelResourceCaption, viewModelStart)
            End If
            Return beginResult & String.Format("{0}'s event from {1} to {2}.", viewModelResourceCaption, sourceStart, viewModelStart)
        End Function

        Private Sub OnStartRecordDrag(ByVal sender As Object, ByVal e As StartRecordDragEventArgs)
            e.Data.SetData(GetType(IEnumerable(Of AppointmentItem)), e.Records.Cast(Of Patient)().Select(Function(x) CreateAppointment(x)))
            e.Handled = True
        End Sub


        Private Function CreateAppointment(ByVal patient_Renamed As Patient) As AppointmentItem
            Dim result As New AppointmentItem()
            result.CustomFields.Add(New CustomField("PatientId", patient_Renamed.Id))
            result.Subject = patient_Renamed.Name
            result.LabelId = Me.scheduler.LabelItems(0).Id
            result.StatusId = Me.scheduler.StatusItems(1).Id
            Return result
        End Function
        Private Sub OnCompleteRecordDragDrop(ByVal sender As Object, ByVal e As CompleteRecordDragDropEventArgs)
            e.Handled = True
        End Sub
        Private Sub OnDragRecordOver(ByVal sender As Object, ByVal e As DragRecordOverEventArgs)
            e.Effects = DragDropEffects.Move
            e.Handled = True
        End Sub
        Private Sub OnDropRecord(ByVal sender As Object, ByVal e As DropRecordEventArgs)
            e.Handled = True
        End Sub
    End Class
End Namespace
