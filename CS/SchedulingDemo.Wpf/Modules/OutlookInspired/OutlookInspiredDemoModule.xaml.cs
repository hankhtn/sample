using System.Collections.Specialized;
using System.Linq;
using System.Windows;
using DevExpress.Xpf.DemoBase;
using DevExpress.Xpf.Scheduling;
using SchedulingDemo.ViewModels;

namespace SchedulingDemo {
    [NoAutogeneratedCodeFiles, CodeFiles(
        "Modules/OutlookInspired/OutlookInspiredDemoModule.xaml",
        "ViewModels/OutlookInspired/OutlookInspiredDemoViewModel.(cs)")]
    public partial class OutlookInspiredDemoModule : SchedulingDemoModule {
        public OutlookInspiredDemoModule() : base(true, true) {
            InitializeComponent();
            this.scheduler.SelectedAppointments.CollectionChanged += SelectedAppointmentsCollectionChanged;
        }

        void SelectedAppointmentsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e) {
            OutlookInspiredDemoViewModel viewModel = DataContext as OutlookInspiredDemoViewModel;
            if (viewModel == null)
                return;
            viewModel.SelectedAppointment = this.scheduler.SelectedAppointments.Count == 0 ? null : this.scheduler.SelectedAppointments[0];
        }

        protected override void Hide() {
            this.ribbonControl.CloseApplicationMenu();
            base.Hide();
        }

        void InitNewAppointment(object sender, AppointmentItemEventArgs e) {
            if (e.Appointment.CustomFields["Priority"] == null)
                e.Appointment.CustomFields["Priority"] = EventPriority.None;
            if (e.Appointment.CustomFields["IsPrivate"] == null)
                e.Appointment.CustomFields["IsPrivate"] = false;
        }
        void OnAppointmentWindowShowing(object sender, AppointmentWindowShowingEventArgs e) {
            e.Window.DataContext = OutlookEventWindowViewModel.Create(this.scheduler, e.Appointment);
        }

        void OnCreateResourceSourceObject(object sender, CreateResourceSourceObjectEventArgs e) {
            e.SourceObject = Calendar.Create();
        }
    }
}
